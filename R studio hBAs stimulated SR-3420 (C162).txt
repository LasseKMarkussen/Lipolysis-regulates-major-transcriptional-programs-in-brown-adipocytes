
#Importere data
setwd("C:/Users/lassekm/OneDrive - Syddansk Universitet/Skrivebord/Lipolysis_DK")

#Laver en matrix med 18 rækker (antal prøver) og 3 kolonner (condition, replicate and name)
coldata <- matrix(nrow=6, ncol=3)

#Navngiver kolonnerner
colnames(coldata) <- c("Condition", "Replicate", "Names")

#Angiver de forskellige conditions.[,1] angiver, at vi modificerer "condition" angivet I commandolinjen ovenfor. "3" henviser til at den samme condition skal skrives 3 gange i træk.  
coldata[,1] <- c(rep("DMSO",3), rep("C162",3)) 

#Putter de uafhængige replikater på de forskellige conditions. 
coldata[,2] <- rep(c("a","b","c"),2)  

#Kombinerer "condition" og "replicate" i rækken "names", bliver adskilt med "_"
coldata[,3] <- paste0(coldata[,1],"_", coldata[,2])

#indlæser text-filen med det mappet sekventeringsdata.
data <- read.delim("C:/Users/lassekm/OneDrive - Syddansk Universitet/Skrivebord/Lipolysis_DK/Human_SR3420.txt") 

#making the RefSeq ID the rownames of the dataframe.
rownames(data) <- data$Symbol

#Making the DESeq2 countdata object - this should only include counts(check the "data" frame and see that it really is row 9 to 26.
countdata <- data[,9:14] 

#Naming the columns. Using information from previous coldata file (above)
colnames(countdata) <- coldata[,3] 

#Sorting out everything which in none of the conditions exceeds 10 reads 
countdata <- as.matrix(countdata[apply(countdata,1,max)>20,]) 

#You probably have to install it the first time (look at the internet)
library(DESeq2)

#dds analysis
dds <- DESeqDataSetFromMatrix(countdata, coldata, design=~Replicate+Condition)
dds <- DESeq(dds)

#rlog transforming the data
rld <- rlog(dds)
library(ggplot2)

#Making PCA plot.
data <- plotPCA(rld, intgroup=c("Condition", "Replicate"), returnData=TRUE)
percentVar <- round(100 * attr(data, "percentVar"))
ggplot(data, aes(PC1, PC2, color=Condition, shape=Replicate)) +
  geom_point(size=8) +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance"))

#Making rlog values to be used later (are nice to have for clustering)
rld <- assay(rlog(dds)) 

#Angiver nu at det er rlog-værdier
colnames(rld) <- paste0("rlog_",coldata[,3])

#Udregner en average rlog-værdi for hver condition
for(i in c(1,4)){
  tmp <- (rld[,i]+rld[,i+1]+rld[,i+2])/3
  rld <- cbind(rld,tmp)
}

#Navngiver rlog-average datakolonnerne: 
colnames(rld)[7:8] <- paste0("rlog_average_", coldata[c(1,4),1])

#Making normalized counts to be used later (are nice for plotting different genes)
counts.norm <- counts(dds, normalized = TRUE) 
for(i in c(1,4)){
  tmp <- (counts.norm[,i]+counts.norm[,i+1]+counts.norm[,i+2])/3
  counts.norm <- cbind(counts.norm,tmp)
}

colnames(counts.norm)[7:8] <- paste0("counts_average_", coldata[c(1,4),1])

#Danner en stor matrix af de forskellige matrices
data.1 <- cbind(countdata, rld, counts.norm)

#Making contrasts, and adding them to data.1 dataframe. The data.1 dataframe will end up containing all my information
tmp <- as.data.frame(results(dds, contrast=c("Condition", "C162", "DMSO")))
colnames(tmp) <- paste0("C162_vs_DMSO", colnames(tmp))
data.1 <- cbind(data.1, tmp)

data.1[is.na(data.1)] <- 0




#kmeans clustering (Taking only genes which are induced comparing DMSO with ISO) 
c <- data.1[ data.1$C162_vs_DMSOlog2FoldChange > 0.7 & data.1$C162_vs_DMSOpadj < 0.05,] #Here, DE == 5% FDR and at least two fold change (log2FC > 1)
c <- c[,c("rlog_average_DMSO", "rlog_average_DMSO", "rlog_average_C162", "rlog_average_C162")]
par(mfrow=c(3,3), mar=c(2,2,2,2))
Sig_Cluster_Scaled <-t(scale(t(c)))
no.cluster_sig <- 2
km_Sig <- kmeans(Sig_Cluster_Scaled, no.cluster_sig, iter.max=300, nstart=100)
for(i in 1:no.cluster_sig) {
  tmp_sig <- Sig_Cluster_Scaled[km_Sig$cluster == i,]
  mycol <- rgb(0.5,0,0.5,0.2)
  plot(0,0,pch=' ', xlim=c(1,4), ylim=c(-3,3), xlab="", ylab="", yaxt="n", xaxt="n")
  
  for(j in 1:dim(tmp_sig)[1]){
    lines(1:4, tmp_sig[j,], col=mycol)
  }
  lines(1:4, apply(tmp_sig,2, median), lwd=3)
  axis(2, at=c(-3,0,3), lab=c(-3,0,3), cex.axis=1)
  axis(1, at=c(1:4), lab=FALSE)  
}

#Extracting genes from each cluster
Activated_cluster <- as.data.frame(km_Sig$cluster) 
Activated_cluster$Cluster_Nr <- Activated_cluster[,1]

#How many genes in each cluster:
nrow(Activated_cluster[ Activated_cluster$Cluster_Nr == 1,]) #Activated cluster 1 (143)
nrow(Activated_cluster[ Activated_cluster$Cluster_Nr == 2,]) #Activated cluster 2 (105)
nrow(Activated_cluster[ Activated_cluster$Cluster_Nr == 3,]) #Activated cluster 3 (192)
nrow(Activated_cluster[ Activated_cluster$Cluster_Nr == 4,]) #Activated cluster 4 (179)

#Total number of genes in the Activated cluster:
nrow(Activated_cluster) #(619)

# Merging cluster info with all other info
Activated_cluster <- merge(Activated_cluster,data.1, by="row.names") 
rownames(Activated_cluster) <- Activated_cluster$Row.names
heat <- matrix(nrow=1, ncol=ncol(Activated_cluster))
colnames(heat) <- colnames(Activated_cluster)

#Making a loop which takes each cluster, and orders the genes based on fold change between ISO and DMSO conditions
for(i in 1:4){
  tmp <- Activated_cluster[ Activated_cluster$Cluster_Nr == i,]
  tmp <- tmp[order(tmp$C162_vs_DMSOlog2FoldChange),]
  heat <- rbind(heat, tmp)
}

#Taking rlog values for each replicate, and drawing a heatmap 
heat <- heat[,c("rlog_DMSO_a", "rlog_DMSO_b", "rlog_DMSO_c", "rlog_C162_a", "rlog_C162_b", "rlog_C162_c")]

# Putting together the two dataframes containing rlog values for induced repressed genes for a heatmap 
heat.1 <- rbind(heat)
heat.1 <- t(scale(t(heat.1)))


#Saturating it a bit. So all genes wich a scaled rlog value greater than 2.5 should just be viewed a 2.5.
heat.1[heat.1>2] <- 2

# Everything lower than -2 should just be called -2
heat.1[heat.1< -2] <- -2 

#Choosing the colors. 
col<- colorRampPalette(c("red", "white", "blue"))(256) 

#Making the heatmap
library(pheatmap)
pheatmap(heat.1, scale="none", cluster_rows = FALSE, cluster_cols = FALSE,  gaps_row = NULL)
